import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import logging

load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError(
        "–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç TELEGRAM_BOT_TOKEN"
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(STATE_WELCOME, STATE_VIDEO, STATE_READY, STATE_Q1, STATE_Q2, STATE_Q3, STATE_Q4, 
 STATE_Q5, STATE_Q6, STATE_Q7, STATE_Q8, STATE_SUBSCRIPTION, STATE_PAYMENT) = range(13)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞ —Å–≤—è–∑–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∏ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è WILLWAY. "
        "–ú—ã –ø–æ–º–æ–≥–∞–µ–º –ª—é–¥—è–º —Å–æ–∑–¥–∞—Ç—å –∑–¥–æ—Ä–æ–≤–æ–µ –ø–æ–¥—Ç—è–Ω—É—Ç–æ–µ —Ç–µ–ª–æ –∏ –æ—Ç–ª–∏—á–Ω–æ–µ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "–ß–µ—Ä–µ–∑ –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–∂–µ –ø—Ä–æ—à–ª–æ 1000+ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥–ª–∏ –¥–æ–±–∏—Ç—å—Å—è —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.\n\n"
        "–ù–∞—à–∞ —Å—É–ø–µ—Ä—Å–∏–ª–∞ –≤ —Ç–æ–º, —á—Ç–æ –º—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å—Ö–æ–¥—è –∏–∑ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ü–µ–ª–µ–π —á–µ–ª–æ–≤–µ–∫–∞. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —ç—Ç–æ—Ç –ø—É—Ç—å –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤–º–µ—Å—Ç–µ?"
    )
    keyboard = [[InlineKeyboardButton("–°—Ç–∞—Ä—Ç", callback_data='start_conversation')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    return STATE_WELCOME

async def start_conversation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ù–∞—á–∞—Ç—å."""
    query = update.callback_query
    await query.answer()
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
        with open("IMG_5106.MOV", "rb") as video_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            message = await query.message.reply_video(
                video=video_file,
                caption="–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–µ—Ç–æ–¥–µ üëÜ",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='ready_for_quiz')]
                ]),
                read_timeout=30,
                write_timeout=30,
                connect_timeout=30,
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
                supports_streaming=True,
                # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—å—é
                width=480,
                height=640
            )
            
            if message and message.video:
                print(f"\nVideo file_id: {message.video.file_id}\n")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                context.bot_data['video_file_id'] = message.video.file_id
                
    except Exception as e:
        print(f"–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π file_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if 'video_file_id' in context.bot_data:
            try:
                await query.message.reply_video(
                    video=context.bot_data['video_file_id'],
                    caption="–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–µ—Ç–æ–¥–µ üëÜ",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å", callback_data='ready_for_quiz')]
                    ])
                )
                return STATE_VIDEO
            except Exception as e2:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e2)}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await query.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='start_conversation')]
            ])
        )
    
    return STATE_VIDEO

async def ready_for_quiz_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å."""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.edit_message_reply_markup(reply_markup=None)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º
    keyboard = [
        [InlineKeyboardButton("–ù–µ –∑–∞–Ω–∏–º–∞—é—Å—å", callback_data='sport_none')],
        [InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data='sport_1_2')],
        [InlineKeyboardButton("3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data='sport_3_4')],
        [InlineKeyboardButton("5+ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data='sport_5_plus')]
    ]
    
    await query.message.reply_text(
        "1/8: –ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–ø–æ—Ä—Ç–æ–º?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return STATE_Q1

async def question1_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1 –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É 2."""
    query = update.callback_query
    await query.answer()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ user_data
    context.user_data['sport_frequency'] = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 'sport_1_2'
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É: –∫–∞–∫ —á–∞—Å—Ç–æ –º–µ–¥–∏—Ç–∏—Ä—É–µ—à—å?
    keyboard = [
        [InlineKeyboardButton("1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data='meditate_1_2')],
        [InlineKeyboardButton("3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data='meditate_3_5')],
        [InlineKeyboardButton("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data='meditate_daily')],
        [InlineKeyboardButton("–ü—Ä–æ–±–æ–≤–∞–ª(–∞) –Ω–æ –Ω–µ –ø–æ—à–ª–æ", callback_data='meditate_failed')],
        [InlineKeyboardButton("–ù–µ –º–µ–¥–∏—Ç–∏—Ä—É—é", callback_data='meditate_none')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("2/8: –ö–∞–∫ —á–∞—Å—Ç–æ –º–µ–¥–∏—Ç–∏—Ä—É–µ—à—å/–ø—Ä–∞–∫—Ç–∏–∫—É–µ—à—å?")
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    return STATE_Q2

async def question2_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2 –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–æ–ø—Ä–æ—Å 3 ‚Äì –ø–æ–ª)."""
    query = update.callback_query
    await query.answer()
    context.user_data['meditate_frequency'] = query.data
    
    # –í–æ–ø—Ä–æ—Å 3: –ü–æ–ª
    keyboard = [
        [InlineKeyboardButton("–ú", callback_data='male')],
        [InlineKeyboardButton("–ñ", callback_data='female')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text("3/8: –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –ø–æ–ª:")
    await query.message.reply_text("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=reply_markup)
    return STATE_Q3

async def question3_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É 4 (–≤–æ–∑—Ä–∞—Å—Ç)."""
    query = update.callback_query
    await query.answer()
    context.user_data['gender'] = query.data
    
    # –í–æ–ø—Ä–æ—Å 4: –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?
    await query.edit_message_text("4/8: –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return STATE_Q4

async def question4_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–æ—Å—Ç."""
    user_age = update.message.text
    context.user_data['age'] = user_age
    await update.message.reply_text("5/8: –ö–∞–∫–æ–π —É —Ç–µ–±—è —Ä–æ—Å—Ç? (–≤ —Å–º)\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return STATE_Q5

async def question5_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å."""
    user_height = update.message.text
    context.user_data['height'] = user_height
    await update.message.reply_text("6/8: –ö–∞–∫–æ–π —Å–µ–π—á–∞—Å –≤–µ—Å? (–≤ –∫–≥)\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ.")
    return STATE_Q6

async def question6_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ç—Ä–∞–≤–º–∞—Ö."""
    user_weight = update.message.text
    context.user_data['weight'] = user_weight
    await update.message.reply_text(
        "7/8: –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ —Ç—Ä–∞–≤–º—ã –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∫ –∑–∞–Ω—è—Ç–∏—è–º? "
        "–ï—Å–ª–∏ –¥–∞, –æ–ø–∏—à–∏, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –∏ –Ω–∞–∂–º–∏ '–î–∞–ª–µ–µ'."
    )
    return STATE_Q7

async def question7_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–≤–º–∞—Ö –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å."""
    injuries = update.message.text
    context.user_data['injuries'] = injuries
    # –í–æ–ø—Ä–æ—Å 8: –ó–∞–ø—Ä–æ—Å (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –æ–¥–∏–Ω –≤—ã–±–æ—Ä)
    keyboard = [
        [InlineKeyboardButton("–°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", callback_data='weight_loss')],
        [InlineKeyboardButton("–ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Å–∞–Ω–∫–∏", callback_data='posture')],
        [InlineKeyboardButton("–£–±—Ä–∞—Ç—å –±–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ/—à–µ–µ", callback_data='back_neck')],
        [InlineKeyboardButton("–û–±—â–∏–π —Ç–æ–Ω—É—Å/—Ä–µ–ª—å–µ—Ñ –º—ã—à—Ü", callback_data='muscle_tone')],
        [InlineKeyboardButton("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤", callback_data='postpartum')],
        [InlineKeyboardButton("–°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞", callback_data='stress_reduction')],
        [InlineKeyboardButton("–ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π", callback_data='self_contact')],
        [InlineKeyboardButton("–ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É", callback_data='inner_support')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text("8/8: –ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.", reply_markup=reply_markup)
    return STATE_Q8

async def question8_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if 'selected_goals' not in context.user_data:
        context.user_data['selected_goals'] = set()
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
    if query.data == 'next':
        if not context.user_data['selected_goals']:
            await query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç", show_alert=True)
            return STATE_Q8
            
        subscription_text = (
            "–ö—Ä—É—Ç–æ, —Ç–≤–æ—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞! üéâ\n\n"
            "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è:\n\n"
            "- –î–æ—Å—Ç—É–ø –∫ —É–¥–æ–±–Ω–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Å –≤–∏–¥–µ–æ–ø—Ä–æ–≥—Ä–∞–º–º–æ–π üì±\n"
            "- –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≥–∏–≥–∏–µ–Ω—ã üßò‚Äç‚ôÄÔ∏è\n"
            "- –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞ üë®‚Äç‚öïÔ∏è\n\n"
            "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        keyboard = [
            [InlineKeyboardButton("–ú–µ—Å—è—Ü ‚Äî 2222‚ÇΩ", callback_data='sub_month')],
            [InlineKeyboardButton("–ì–æ–¥ ‚Äî 17777‚ÇΩ (-35%)", callback_data='sub_year')]
        ]
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.reply_text(
            subscription_text, 
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.edit_message_reply_markup(reply_markup=None)
        return STATE_SUBSCRIPTION
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–∏
    goal_data = query.data
    if goal_data in context.user_data['selected_goals']:
        context.user_data['selected_goals'].remove(goal_data)
    else:
        context.user_data['selected_goals'].add(goal_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
    goals_buttons = [
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'weight_loss' in context.user_data['selected_goals'] else '‚≠ï'} –°–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞",
            callback_data='weight_loss')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'posture' in context.user_data['selected_goals'] else '‚≠ï'} –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Å–∞–Ω–∫–∏",
            callback_data='posture')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'back_neck' in context.user_data['selected_goals'] else '‚≠ï'} –£–±—Ä–∞—Ç—å –±–æ–ª–∏ –≤ —Å–ø–∏–Ω–µ/—à–µ–µ",
            callback_data='back_neck')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'muscle_tone' in context.user_data['selected_goals'] else '‚≠ï'} –û–±—â–∏–π —Ç–æ–Ω—É—Å/—Ä–µ–ª—å–µ—Ñ –º—ã—à—Ü",
            callback_data='muscle_tone')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'postpartum' in context.user_data['selected_goals'] else '‚≠ï'} –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤",
            callback_data='postpartum')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'stress_reduction' in context.user_data['selected_goals'] else '‚≠ï'} –°–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞",
            callback_data='stress_reduction')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'self_contact' in context.user_data['selected_goals'] else '‚≠ï'} –ü–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Å–æ–±–æ–π",
            callback_data='self_contact')],
        [InlineKeyboardButton(
            f"{'‚úÖ' if 'inner_support' in context.user_data['selected_goals'] else '‚≠ï'} –ù–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–ø–æ—Ä—É",
            callback_data='inner_support')]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    goals_buttons.append([InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data='next')])
    
    try:
        await query.edit_message_text(
            "8/8: –ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(goals_buttons)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await query.message.reply_text(
            "8/8: –ö–∞–∫–æ–π —É —Ç–µ–±—è –∑–∞–ø—Ä–æ—Å? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(goals_buttons)
        )
    
    return STATE_Q8

async def subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏."""
    query = update.callback_query
    await query.answer()
    
    subscription_choice = query.data
    context.user_data['subscription'] = subscription_choice
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_text = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∏ –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ WILLWAY! üéâ\n\n"
        "–î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ç–≤–æ—é –ø–æ—á—Ç—É, "
        "–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —ç—Ç–æ–º –±–æ—Ç–µ."
    )
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    await query.edit_message_text(final_text)
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω.")
    return ConversationHandler.END

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            STATE_WELCOME: [
                CallbackQueryHandler(start_conversation_callback, pattern='^start_conversation$')
            ],
            STATE_VIDEO: [
                CallbackQueryHandler(ready_for_quiz_callback, pattern='^ready_for_quiz$')
            ],
            STATE_Q1: [
                CallbackQueryHandler(question1_handler, pattern='^sport_')
            ],
            STATE_Q2: [
                CallbackQueryHandler(question2_handler, pattern='^meditate_')
            ],
            STATE_Q3: [
                CallbackQueryHandler(question3_handler, pattern='^(male|female)$')
            ],
            STATE_Q4: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, question4_handler)
            ],
            STATE_Q5: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, question5_handler)
            ],
            STATE_Q6: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, question6_handler)
            ],
            STATE_Q7: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, question7_handler)
            ],
            STATE_Q8: [
                CallbackQueryHandler(question8_handler, pattern='^(weight_loss|posture|back_neck|muscle_tone|postpartum|stress_reduction|self_contact|inner_support|next)$')
            ],
            STATE_SUBSCRIPTION: [
                CallbackQueryHandler(subscription_handler, pattern='^sub_')
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(conv_handler)
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    run_bot()
